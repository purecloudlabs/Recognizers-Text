---
#ISO 639-2 Code
LangMarker: Cat
#Does this language use non-whitespace-separated numbers?
CompoundNumberLanguage: !bool false
#Does this culture uses period and comma intercheangeably as decimal separator?
MultiDecimalSeparatorCulture: !bool true
#List of culture variants that don't follow the default decimal separator
NonStandardSeparatorVariants: !list
  types: [ string ]
  entries:
    - es-mx
    - es-do
    - es-sv
    - es-gt
    - es-hn
    - es-ni
    - es-pa
    - es-pr
#Integer Regex
HundredsNumberIntegerRegex: !simpleRegex
  def: (quatrecent[os]|trescent[os]|siscent[os]|setcent[os]|vuitcent[os]|noucent[os]|doscent[os]|cinccent[os]|(?<!per\s+) (cent (o) ?))
RoundNumberIntegerSingRegex: !simpleRegex
  def: (((mil\s+)? mi|bi|cuatri|quint|sext|sept)ll[oó]|mil)
RoundNumberIntegerRegex: !nestedRegex
  def: ({RoundNumberIntegerSingRegex}(es)?)
  references: [ RoundNumberIntegerSingRegex ]
ZeroToNineIntegerRegex: !simpleRegex
  def: (quatre|cinc|set|nou|zero|tres|sis|vuit|dos|un[ao]?)
TwoToNineIntegerRegex: !simpleRegex
  def: (quatre|cinc|set|nou|tres|sis|vuit|dos)
TenToNineteenIntegerRegex: !simpleRegex
  def: (disset|dinou|setze|divuit|catorze|quinze|tretze|deu|onze|dotze)
TwentiesIntegerRegex: !simpleRegex
  def: (vint-i-(quatre|cinc|set|nou|tres|sis|vuit|dos|un[oa]?)|ventiun[ao]|vint)
TensNumberIntegerRegex: !simpleRegex
  def: (cinquanta|quaranta|trenta|seixanta|vuitanta|noranta)
NegativeNumberTermsRegex: !simpleRegex
  def: (?<negTerm>(?<!\sal\s+|\slo\s+)menys\s+)
NegativeNumberSignRegex: !nestedRegex
  def: ^{NegativeNumberTermsRegex}.*
  references: [ NegativeNumberTermsRegex ]
DigitsNumberRegex: !simpleRegex
  def: \d|\d{1,3}(\.\d{3})
BelowHundredsRegex: !nestedRegex
  def: (({TenToNineteenIntegerRegex}|{TwentiesIntegerRegex}|({TensNumberIntegerRegex}(\s+i\s+{ZeroToNineIntegerRegex})?))|{ZeroToNineIntegerRegex})
  references: [ TenToNineteenIntegerRegex, TwentiesIntegerRegex, TensNumberIntegerRegex, ZeroToNineIntegerRegex ]
BelowThousandsRegex: !nestedRegex
  def: ({HundredsNumberIntegerRegex}(\s+{BelowHundredsRegex})?|{BelowHundredsRegex})
  references: [ HundredsNumberIntegerRegex, BelowHundredsRegex ]
SupportThousandsRegex: !nestedRegex
  def: (({BelowThousandsRegex}|{BelowHundredsRegex})\s+{RoundNumberIntegerRegex}(\s+{RoundNumberIntegerRegex})?)
  references: [ BelowThousandsRegex, BelowHundredsRegex, RoundNumberIntegerRegex ]
SeparaIntRegex: !nestedRegex
  def: ({SupportThousandsRegex}(\s+{SupportThousandsRegex})*(\s+{BelowThousandsRegex})?|{BelowThousandsRegex})
  references: [ SupportThousandsRegex, BelowThousandsRegex ]
AllIntRegex: !nestedRegex
  def: ({SeparaIntRegex}|mil(\s+{BelowThousandsRegex})?|{RoundNumberIntegerSingRegex})
  references: [ SeparaIntRegex, BelowThousandsRegex, RoundNumberIntegerSingRegex ]
PlaceHolderPureNumber: !simpleRegex
  def: \b
PlaceHolderDefault: !simpleRegex
  def: \D|\b
NumbersWithPlaceHolder: !paramsRegex
  def: (((?<!\d+\s*)-\s*)|(?<=\b))\d+(?!([\.,]\d+[a-zA-Z]))(?={placeholder})
  params: [ placeholder ]
NumbersWithSuffix: !nestedRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+\s*{BaseNumbers.NumberMultiplierRegex}(?=\b)
  references: [ BaseNumbers.NumberMultiplierRegex ]
RoundNumberIntegerRegexWithLocks: !nestedRegex
  def: (?<=\b)({DigitsNumberRegex})+\s+{RoundNumberIntegerRegex}(?=\b)
  references: [ DigitsNumberRegex, RoundNumberIntegerRegex ]
NumbersWithDozenSuffix: !simpleRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+\s+(dotzena|dz|doz)s?(?=\b)
AllIntRegexWithLocks: !nestedRegex
  def: ((?<=\b){AllIntRegex}(?=\b))
  references: [ AllIntRegex ]
AllIntRegexWithDozenSuffixLocks: !nestedRegex
  def: (?<=\b)(((mitja\s+)?\s+dotzena)|({AllIntRegex}\s+(i|amb)\s+)?({AllIntRegex}\s+(dotzena|dz|doz)s?))(?=\b)
  references: [ AllIntRegex ]
#Ordinal Regex
SimpleRoundOrdinalRegex: !simpleRegex
  def: (milèssim|milió-sim[ao]|billó-sim[ao]|triló-sim[ao]|quadriló-sim[ao]|quintiló-sim[ao]|sextiló-sim[ao]|septiló-sim[ao])
OneToNineOrdinalRegex: !simpleRegex
  def: (primer[ao]?|segon[da]|tercer[ao]?|quart[ao]|quint[ao]|sext[ao]|setè[na]|vuitè[na]|novè[na])
TensOrdinalRegex: !simpleRegex
  def: (nonagèssim[ao]|octogèssim[ao]|septuagèssim[ao]|sexagèssim[ao]|quinquagèssim[ao]|quadragèssim[ao]|trigèssim[ao]|vigsèssim[ao]|dècim[ao])
HundredOrdinalRegex: !simpleRegex
  def: (centèsim[ao]|ducentèsim[ao]|tricentèsim[ao]|quadrangentèsim[ao]|quingentèsim[ao]|siscentèsim[ao]|setcentèsim[ao]|vuitcentèsim[ao]|noucentèsim[ao])
SpecialUnderHundredOrdinalRegex: !simpleRegex
  def: (onzen[ao]|dotzèn[ao]|divuitè[na])
UnderHundredOrdinalRegex: !nestedRegex
  def: ({SpecialUnderHundredOrdinalRegex}|(({TensOrdinalRegex}(\s)?)?{OneToNineOrdinalRegex})|{TensOrdinalRegex})
  references: [ TensOrdinalRegex, OneToNineOrdinalRegex, SpecialUnderHundredOrdinalRegex ]
UnderThousandOrdinalRegex: !nestedRegex
  def: ((({HundredOrdinalRegex}(\s)?)?{UnderHundredOrdinalRegex})|{HundredOrdinalRegex})
  references: [ HundredOrdinalRegex, UnderHundredOrdinalRegex ]
OverThousandOrdinalRegex: !nestedRegex
  def: (({AllIntRegex})(èssim[ao]))
  references: [ AllIntRegex ]
RelativeOrdinalRegex: !simpleRegex
  def: (?<relativeOrdinal>(abans\s+de|anterior\s+a)(el|\s+la)\s+últim[ao]|((abans)?pen)?últim[ao]s?|pròxim[ao]s?|anteriors?|actuals?|següents?)
ComplexOrdinalRegex: !nestedRegex
  def: (({OverThousandOrdinalRegex}(\s)?)?{UnderThousandOrdinalRegex}|{OverThousandOrdinalRegex})
  references: [ OverThousandOrdinalRegex, UnderThousandOrdinalRegex ]
SufixRoundOrdinalRegex: !nestedRegex
  def: (({AllIntRegex})({SimpleRoundOrdinalRegex}))
  references: [ AllIntRegex, SimpleRoundOrdinalRegex ]
ComplexRoundOrdinalRegex: !nestedRegex
  def: ((({SufixRoundOrdinalRegex}(\s)?)?{ComplexOrdinalRegex})|{SufixRoundOrdinalRegex})
  references: [ SufixRoundOrdinalRegex, ComplexOrdinalRegex ]
AllOrdinalNumberRegex: !nestedRegex
  def: '{ComplexOrdinalRegex}|{SimpleRoundOrdinalRegex}|{ComplexRoundOrdinalRegex}'
  references: [ ComplexOrdinalRegex, SimpleRoundOrdinalRegex, ComplexRoundOrdinalRegex ]
AllOrdinalRegex: !nestedRegex
  def: (?:{AllOrdinalNumberRegex}s?|{RelativeOrdinalRegex})
  references: [ AllOrdinalNumberRegex, RelativeOrdinalRegex ]
OrdinalSuffixRegex: !simpleRegex
  def: (?<=\b)(\d*((1(er|r[oa])|2n[da]|3r[oa]|4t[ao]|5è[na]|6è[na]|7è[na]|8è[na]|9è[na]|0è[na]|11[vm][ao]|12[vm][ao])|\d\.?[ºª]))(?=\b)
OrdinalNounRegex: !nestedRegex
  def: (?<=\b){AllOrdinalRegex}(?=\b)
  references: [ AllOrdinalRegex ]
#Fraction Regex
SpecialFractionInteger: !nestedRegex
  def: ((({AllIntRegex})i?({ZeroToNineIntegerRegex})|({AllIntRegex}))a?v[oa]s?)
  references: [ AllIntRegex, ZeroToNineIntegerRegex ]
FractionNotationRegex: !nestedRegex
  def: '{BaseNumbers.FractionNotationRegex}'
  references: [ BaseNumbers.FractionNotationRegex ]
FractionNotationWithSpacesRegex: !simpleRegex
  def: (((?<=\W|^)-\s*)|(?<=\b))\d+\s+\d+[/]\d+(?=(\b[^/]|$))
FractionMultiplierRegex: !nestedRegex
  def: (?<fracMultiplier>\s+(i|amb)\s+(mig|(un|{TwoToNineIntegerRegex})\s+(mig|terç[oa]?|quart[oa]|quint[oa]|sext[oa]|sèptim[oa]|vuitè[na]|novè[na]|dècim[oa])s?))
  references: [ TwoToNineIntegerRegex ]
RoundMultiplierWithFraction: !nestedRegex
  def: (?<multiplier>(?:(mil\s+millions|milions|billion[io]ns?|trillion[io]ns?|quadrillion[io]ns?|quintillion[io]ns?|sextillion[io]ns?|sèptillion[io]ns?)))(?={FractionMultiplierRegex}?$)
  references: [ FractionMultiplierRegex ]
RoundMultiplierRegex: !nestedRegex
  def: \b\s*({RoundMultiplierWithFraction}|(?<multiplier>(mil))$)
  references: [ RoundMultiplierWithFraction ]
FractionNounRegex: !nestedRegex
  def: (?<=\b)({AllIntRegex}\s+((i|amb)\s+)?)?({AllIntRegex}\s+((({AllOrdinalNumberRegex}|{SufixRoundOrdinalRegex})s|{SpecialFractionInteger})|((i|amb)\s+)?(mig|terç[oa]|quart[oa]|quint[oa]|sext[oa]|sèptim[oa]|vuitè[na]|novè[na]))|(mig|un\s+quart\s+de)\s+{RoundNumberIntegerRegex})(?=\b)
  references: [ AllIntRegex, AllOrdinalNumberRegex, SpecialFractionInteger, SufixRoundOrdinalRegex, RoundNumberIntegerRegex ]
FractionNounWithArticleRegex: !nestedRegex
  def: (?<=\b)(({AllIntRegex}|{RoundNumberIntegerRegexWithLocks})\s+((i|amb)\s+)?)?((un|una)(\s+)(({AllOrdinalNumberRegex})|({SufixRoundOrdinalRegex}))|(un[oa]?\s+)?mig|mitjà)(?=\b)
  references: [ AllIntRegex, AllOrdinalNumberRegex, SufixRoundOrdinalRegex, RoundNumberIntegerRegexWithLocks ]
FractionPrepositionRegex: !nestedRegex
  def: (?<!{BaseNumbers.CommonCurrencySymbol}\s*)(?<=\b)(?<numerator>({AllIntRegex})|((?<!\.)\d+))\s+sobre\s+(?<denominator>({AllIntRegex})|((\d+)(?!\.)))(?=\b)
  references: [ AllIntRegex, BaseNumbers.CommonCurrencySymbol ]
#Double Regex
AllPointRegex: !nestedRegex
  def: ((\s+{ZeroToNineIntegerRegex})+|(\s+{AllIntRegex}))
  references: [ ZeroToNineIntegerRegex, AllIntRegex ]
AllFloatRegex: !nestedRegex
  def: '{AllIntRegex}(\s+(coma|amb)){AllPointRegex}'
  references: [ AllIntRegex, AllPointRegex ]
DoubleDecimalPointRegex: !paramsRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))\d+[\.,]\d+(?!([\.,]\d+))(?={placeholder})
  params: [ placeholder ]
DoubleWithoutIntegralRegex: !paramsRegex
  def: (?<=\s|^)(?<!(\d+))[\.,]\d+(?!([\.,]\d+))(?={placeholder})
  params: [ placeholder ]
DoubleWithMultiplierRegex: !nestedRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+\[\.,])))\d+[\.,]\d+\s*{BaseNumbers.NumberMultiplierRegex}(?=\b)
  references: [ BaseNumbers.NumberMultiplierRegex ]
DoubleWithRoundNumber: !nestedRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+\[\.,])))\d+[\.,]\d+\s+{RoundNumberIntegerRegex}(?=\b)
  references: [ RoundNumberIntegerRegex ]
DoubleAllFloatRegex: !nestedRegex
  def: ((?<=\b){AllFloatRegex}(?=\b))
  references: [ AllFloatRegex ]
DoubleExponentialNotationRegex: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))(\d+([\.,]\d+)?)e([+-]*[1-9]\d*)(?=\b)
DoubleCaretExponentialNotationRegex: !simpleRegex
  def: (((?<!\d+\s*)-\s*)|((?<=\b)(?<!\d+[\.,])))(\d+([\.,]\d+)?)\^([+-]*[1-9]\d*)(?=\b)
#Percentage Regex
NumberWithPrefixPercentage: !nestedRegex
  def: (?<!%)({BaseNumbers.NumberReplaceToken})(\s*)(%(?!{BaseNumbers.NumberReplaceToken})|per cent\b)
  references: [ BaseNumbers.NumberReplaceToken ]
#NumberRange Regex
TillRegex: !simpleRegex
  def: (\ba\b|fins|--|-|—|——|~|–)
MoreRegex: !simpleRegex
  def: (més\s+(alt[oa]s?|grans)\s+que|(m[áa]s|major(es)?|superior(es)?|per sobre)\b((\s+(que|del?|al?))|(?=\s+o\b))|(?<!<|=)>)
LessRegex: !simpleRegex
  def: ((menys|r(es)?|inferior(es)?|per sota)((\s+(que|del?|al?)|(?=\s+o\b)))|més\s+baix[oa]\s+que|(?<!>|=)<)
EqualRegex: !simpleRegex
  def: ((igual(es)?|equivalent(s)?|equivalen?)(\s+(al?|que|del?))?|(?<!<|>)=)
MoreOrEqualPrefix: !nestedRegex
  def: ((no\s+{LessRegex})|(com\s+a\s+mínim|com\s+a\s+minimum|al\s+menys))
  references: [ LessRegex ]
MoreOrEqual: !nestedRegex
  def: (({MoreRegex}\s+(o)?\s+{EqualRegex})|({EqualRegex}\s+(o|i)\s+{MoreRegex})|{MoreOrEqualPrefix}(\s+(o)\s+{EqualRegex})?|({EqualRegex}\s+(o)\s+)?{MoreOrEqualPrefix}|>\s*=)
  references: [ MoreRegex, EqualRegex, LessRegex, MoreOrEqualPrefix ]
MoreOrEqualSuffix: !simpleRegex
  def: ((\b(i|o)\b\s+(m[áa]s|major(es)?|superior(es)?)((?!\s+(alt[oa]|baix[oa]|que|del?|al?))|(\s+(que|del?|al?)(?!(\s*\d+)))))|com\s+a\s+mínim|com\s+a\s+minimum|al\s+menys)\b
LessOrEqualPrefix: !nestedRegex
  def: ((no\s+{MoreRegex})|(com\s+a\s+màxim|com\s+a\s+màxim))
  references: [ MoreRegex ]
LessOrEqual: !nestedRegex
  def: (({LessRegex}\s+(o)?\s+{EqualRegex})|({EqualRegex}\s+(o)?\s+{LessRegex})|{LessOrEqualPrefix}(\s+(o)?\s+{EqualRegex})?|({EqualRegex}\s+(o)?\s+)?{LessOrEqualPrefix}|<\s*=)
  references: [ LessRegex, EqualRegex, MoreRegex, LessOrEqualPrefix ]
LessOrEqualSuffix: !simpleRegex
  def: ((\b(i|o)\b\s+(menys|r(es)?|inferior(es)?)((?!\s+(alt[oa]|baix[oa]|que|del?|al?))|(\s+(que|del?|al?)(?!(\s*\d+)))))|com\s+a\s+màxim)\b
NumberSplitMark: !nestedRegex
  def: (?![,.](?!\d+))(?!\s*\b(((i|e)\s+)?({LessRegex}|{MoreRegex}|{EqualRegex}|no|de)|però|o|a)\b)
  references: [ LessRegex, MoreRegex, EqualRegex ]
MoreRegexNoNumberSucceed: !simpleRegex
  def: (\b(m[áa]s|major(es)?|superior(es)?)((?!\s+(que|del?|al?))|\s+((que|del?)(?!(\s*\d+))))|(per sobre)(?!(\s*\d+)))\b
LessRegexNoNumberSucceed: !simpleRegex
  def: (\b(menys|r(es)?|inferior(es)?)((?!\s+(que|del?|al?))|\s+((que|del?|al?)(?!(\s*\d+))))|(per sota)(?!(\s*\d+)))\b
EqualRegexNoNumberSucceed: !simpleRegex
  def: (\b(iguals?|equivalents?|equivalen?)(?!\s+(a|que|de)?(\s*\d+))?(\s+(a|que|de))?)(\b)
OneNumberRangeMoreRegex1: !nestedRegex
  def: ({MoreOrEqual}|{MoreRegex})\s*((el|les?|els)\s+)?(?<number1>({NumberSplitMark}.)+)
  references: [ MoreOrEqual, MoreRegex, NumberSplitMark ]
OneNumberRangeMoreRegex1LB: !nestedRegex
  def: (?<!no\s+){OneNumberRangeMoreRegex1}
  references: [ OneNumberRangeMoreRegex1 ]
OneNumberRangeMoreRegex2: !nestedRegex
  def: (?<number1>({NumberSplitMark}.)+)\s*{MoreOrEqualSuffix}
  references: [ MoreOrEqualSuffix, NumberSplitMark ]
OneNumberRangeMoreSeparateRegex: !nestedRegex
  def: ({EqualRegex}\s+(?<number1>({NumberSplitMark}.)+)(\s+o\s+){MoreRegexNoNumberSucceed})|({MoreRegex}\s+(?<number1>({NumberSplitMark}.)+)(\s+o\s+){EqualRegexNoNumberSucceed})
  references: [ EqualRegex, MoreRegex, EqualRegexNoNumberSucceed, MoreRegexNoNumberSucceed, NumberSplitMark ]
OneNumberRangeLessRegex1: !nestedRegex
  def: ({LessOrEqual}|{LessRegex})\s*((el|les?|els)\s+)?(?<number2>({NumberSplitMark}.)+)
  references: [ LessOrEqual, LessRegex, NumberSplitMark ]
OneNumberRangeLessRegex1LB: !nestedRegex
  def: (?<!no\s+){OneNumberRangeLessRegex1}
  references: [ OneNumberRangeLessRegex1 ]
OneNumberRangeLessRegex2: !nestedRegex
  def: (?<number2>({NumberSplitMark}.)+)\s*{LessOrEqualSuffix}
  references: [ LessOrEqualSuffix, NumberSplitMark ]
OneNumberRangeLessSeparateRegex: !nestedRegex
  def: ({EqualRegex}\s+(?<number1>({NumberSplitMark}.)+)(\s+o\s+){LessRegexNoNumberSucceed})|({LessRegex}\s+(?<number1>({NumberSplitMark}.)+)(\s+o\s+){EqualRegexNoNumberSucceed})
  references: [ EqualRegex, LessRegex, EqualRegexNoNumberSucceed, LessRegexNoNumberSucceed, NumberSplitMark ]
OneNumberRangeEqualRegex: !nestedRegex
  def: '{EqualRegex}\s*((el|les?|els)\s+)?(?<number1>({NumberSplitMark}.)+)'
  references: [ EqualRegex, NumberSplitMark ]
TwoNumberRangeRegex1: !nestedRegex
  def: \bentre\s*((el|les?|els)\s+)?(?<number1>({NumberSplitMark}.)+)\si\s((el|les?|els)\s+)?(?<number2>({NumberSplitMark}.)+)
  references: [ NumberSplitMark ]
TwoNumberRangeRegex2: !nestedRegex
  def: ({OneNumberRangeMoreRegex1}|{OneNumberRangeMoreRegex1})\s*(\bi\b|però|,)\s*({OneNumberRangeLessRegex1}|{OneNumberRangeLessRegex2})
  references: [ OneNumberRangeMoreRegex1, OneNumberRangeMoreRegex2, OneNumberRangeLessRegex1, OneNumberRangeLessRegex2 ]
TwoNumberRangeRegex3: !nestedRegex
  def: ({OneNumberRangeLessRegex1}|{OneNumberRangeLessRegex2})\s*(\bi\b|però|,)\s*({OneNumberRangeMoreRegex1}|{OneNumberRangeMoreRegex2})
  references: [ OneNumberRangeMoreRegex1, OneNumberRangeMoreRegex2, OneNumberRangeLessRegex1, OneNumberRangeLessRegex2 ]
TwoNumberRangeRegex4: !nestedRegex
  def: (\b(des de)?\s+)?(\b(el|les?|els)\s+)?\b(?!\s+)(?<number1>({NumberSplitMark}(?!\b(entre|des de?|és)\b).)+)\b\s*{TillRegex}\s*((el|les?|els)\s+)?\b(?!\s+)(?<number2>({NumberSplitMark}.)+)\b
  references: [ TillRegex, NumberSplitMark ]
AmbiguousFractionConnectorsRegex: !simpleRegex
  def: (\b(en|de)\b)
#Parser
DecimalSeparatorChar: !char ','
FractionMarkerToken: sobre
NonDecimalSeparatorChar: !char '.'
HalfADozenText: sis
WordSeparatorToken: i
WrittenDecimalSeparatorTexts: [coma, amb]
WrittenGroupSeparatorTexts: [punt]
WrittenIntegerSeparatorTexts: [i]
WrittenFractionSeparatorTexts: [amb]
OneHalfTokens: [un, mitjà]
HalfADozenRegex: !simpleRegex
  def: mitjana\s+docena
DigitalNumberRegex: !nestedRegex
  def: ((?<=\b)(mil(lions)?|billions?|trillions?|(dozen|dz|doz)s?)(?=\b))|((?<=(\d|\b)){BaseNumbers.MultiplierLookupRegex}(?=\b))
  references: [ BaseNumbers.MultiplierLookupRegex ]
CardinalNumberMap: !dictionary
  types: [ string, long ]
  entries:
    zero: 0
    un: 1
    una: 1
    dos: 2
    tres: 3
    quatre: 4
    cinc: 5
    sis: 6
    set: 7
    vuit: 8
    nou: 9
    deu: 10
    onze: 11
    dotze: 12
    dotzena: 12
    dotzenes: 12
    dz: 12
    dou: 12
    dzs: 12
    dous: 12
    tretze: 13
    catorze: 14
    quinze: 15
    setze: 16
    disset: 17
    divuit: 18
    dinou: 19
    vint: 20
    ventiuna: 21
    ventiuno: 21
    vint-i-un: 21
    vint-i-una: 21
    vint-i-dos: 22
    vint-i-tres: 23
    vint-i-quatre: 24
    vint-i-cinc: 25
    vint-i-sis: 26
    vint-i-set: 27
    vint-i-vuit: 28
    vint-i-nou: 29
    trenta: 30
    quaranta: 40
    cinquanta: 50
    seixanta: 60
    setanta: 70
    vuitanta: 80
    noranta: 90
    cent: 100
    dues-centes: 200
    dos-cents: 200
    tres-centes: 300
    tres-cents: 300
    quatre-centes: 400
    quatre-cents: 400
    cinc-centes: 500
    cinc-cents: 500
    sis-centes: 600
    sis-cents: 600
    set-centes: 700
    set-cents: 700
    vuit-centes: 800
    vuit-cents: 800
    nou-centes: 900
    nou-cents: 900
    mil: 1000
    milió: 1000000
    milions: 1000000
    billó: 1000000000000
    bilió: 10000000000000
    bilions: 1000000000000
    trilió: 10000000000000000000
    trilions: 1000000000000000000
OrdinalNumberMap: !dictionary
  types: [ string, long ]
  entries:
    primera: 1
    primer: 1
    segon: 2
    segona: 2
    mitjà: 2
    mitjana: 2
    meitat: 2
    tercera: 3
    tercer: 3
    terç: 3
    quart: 4
    quarta: 4
    cinquè: 5
    cinquena: 5
    sisè: 6
    sisena: 6
    setena: 7
    setè: 7
    vuitena: 8
    novè: 9
    novena: 9
    desè: 10
    desena: 10
    onzena: 11
    dotzè: 12
    dotzena: 12
    tretzè: 13
    tretzena: 13
    catorzè: 14
    catorzena: 14
    quinzè: 15
    quinzena: 15
    setzè: 16
    setzena: 16
    dissetè: 17
    dissetena: 17
    divuitè: 18
    divuitena: 18
    dinovè: 19
    vint-i-dosena: 20
    vintena: 20
    trentè: 30
    trentena: 30
    quadragesimo: 40
    quarantè: 40
    quarantena: 40
    cinquanta: 50
    sexagèsim: 60
    sexagèsima: 60
    seixantè: 60
    seixanta: 60
    septuagesimo: 70
    setanta: 70
    setanta-unè: 70
    setanta-unena: 70
    vuitè: 80
    octogèsima: 80
    vuitanta-vuit: 80
    nonagesimo: 90
    nonagessima: 90
    norantè: 90
    centessim: 100
    centessima: 100
    centèsim: 100
    centèsima: 100
    ducentesimo: 200
    ducentesima: 200
    tricentessim: 300
    tricentesima: 300
    quadringènsim: 400
    quadringentesíssima: 400
    quarantenèssim: 400
    quinzenèsim: 500
    cinquantíssim: 500
    sexcentessim: 600
    sexcentessima: 600
    sexcentèsim: 600
    sexcentèsima: 600
    septingentesima: 700
    setanta-cent: 700
    setentingentíssima: 700
    octingentessim: 800
    octingentesima: 800
    octingentèsima: 800
    no-ningènsim: 900
    noningentesima: 900
    nointè: 900
    no-centèsima: 900
    mil·lesima: 1000
    mil·lèsim: 1000
    mil·lèsima: 1000
    milionsim: 1000000
    millonesima: 1000000
    milionèsim: 1000000
    milionèsima: 1000000
    bilionssim: 1000000000000
    bilionèsim: 1000000000000
    bilionèsima: 1000000000000
    primers: 1
    primeres: 1
    segons: 2
    segones: 2
    tercers: 3
    terceres: 3
    terços: 3
    quarts: 4
    quartes: 4
    cinquens: 5
    cinquenes: 5
    sisens: 6
    sisenes: 6
    setès: 7
    settimes: 7
    setens: 7
    setenes: 7
    vuitens: 8
    octaves: 8
    novens: 9
    novenes: 9
    diem: 10
    dècims: 10
    dècimes: 10
    undem: 11
    onzenes: 11
    onzè: 11
    dotzem: 12
    dotzens: 12
    catorzers: 14
    catorzenes: 14
    quinzenes: 15
    setzens: 16
    setze: 16
    divuitens: 18
    divuitenes: 18
    dinovena: 19
    vintèsimes: 20
    vint-i-unè: 21
    vint-i-dos: 22
    trentens: 30
    trentenes: 30
    quaranta-sis: 40
    quarantens: 40
    quarantenes: 40
    cinquantè: 50
    cinquantena: 50
    sexagesims: 60
    sexagesimes: 60
    seixanta-sis: 60
    seixantenes: 60
    setanta-sis: 70
    septuagesimas: 70
    setanta-cents: 70
    setanta-centes: 70
    vuitèsims: 80
    vuitcentíssimes: 80
    octogèsims: 80
    octogèsimes: 80
    nonagessims: 90
    nonagessimes: 90
    nonagèsims: 90
    norantèsimes: 90
    centesims: 100
    centesimes: 100
    centèsims: 100
    ducentesimos: 200
    ducentesimes: 200
    centèsimes: 200
    tricentessims: 300
    tricentesíssimes: 300
    tricentèsims: 300
    tricentèsimes: 300
    quadringentessims: 400
    quadringentesíssimes: 400
    quadringentèsims: 400
    quadringentèsimes: 400
    quingentesims: 500
    quingentesíssimes: 500
    quingentèsims: 500
    quingentèsimes: 500
    sexcentesims: 600
    sexcentesimes: 600
    sexcentèsims: 600
    sexcentèsimes: 600
    septingentessim: 700
    septingentesíssimes: 700
    septingentèsims: 700
    septingentèsimes: 700
    octingentesim: 800
    octingentesíssimes: 800
    octingentèsims: 800
    octingentèsimes: 800
    no-ningensíssims: 900
    noningentesíssimes: 900
    no-centèsims: 900
    no-centèsimes: 900
    mil·lèsims: 1000
    mil·lèsimes: 1000
    milionsims: 1000000
    milionsimes: 1000000
    milionèsims: 1000000
    milionèsimes: 1000000
    bilionssims: 1000000000000
    bilionssimes: 10000000000000
    bilionèsims: 1000000000000
    bilionèsimes: 1000000000000
PrefixCardinalMap: !dictionary
  types: [ string, long ]
  entries:
    dos: 2
    tres: 3
    quatre: 4
    cinc: 5
    sis: 6
    set: 7
    vuit: 8
    nou: 9
    deu: 10
    onze: 11
    dotze: 12
    tretze: 13
    catorze: 14
    quinze: 15
    setze: 16
    disset: 17
    divuit: 18
    dinou: 19
    vint: 20
    ventiuna: 21
    vint-i-un: 21
    vint-i-dos: 22
    vint-i-tres: 23
    vint-i-quatre: 24
    vint-i-cinc: 25
    vint-i-sis: 26
    vint-i-set: 27
    vint-i-vuit: 28
    vint-i-nou: 29
    trenta: 30
    quaranta: 40
    cinquanta: 50
    seixanta: 60
    setanta: 70
    vuitanta: 80
    noranta: 90
    cent: 100
    dos-cents: 200
    tres-cents: 300
    quatre-cents: 400
    cinc-cents: 500
    sis-cents: 600
    set-cents: 700
    vuit-cents: 800
    nou-cents: 900
SuffixOrdinalMap: !dictionary
  types: [ string, long ]
  entries:
    mil·lèsim: 1000
    milionsim: 1000000
    bilionssim: 1000000000000
RoundNumberMap: !dictionary
  types: [ string, long ]
  entries:
    mil: 1000
    mil·lèsim: 1000
    milió: 1000000
    milions: 1000000
    milionsim: 1000000
    billó: 1000000000000
    bilió: 10000000000000
    bilions: 1000000000000
    bilionssim: 1000000000000
    trilió: 1000000000000000000
    trilions: 1000000000000000000
    dotzena: 12
    dotzenes: 12
    dz: 12
    dou: 12
    dzs: 12
    dous: 12
    k: 1000
    m: 1000000
    g: 1000000000
    b: 1000000000
    t: 1000000000000
AmbiguityFiltersDict: !dictionary
  types: [ string, string ]
  entries:
    '^[.]': ''
RelativeReferenceOffsetMap: !dictionary
  types: [ string, string ]
  entries:
    propera: 1
    proper: 1
    properes: 1
    propers: 1
    anterior: -1
    anteriors: -1
    actual: 0
    actuals: 0
    següent: 1
    següents: 1
    ultima: 0
    darrera: 0
    últim: 0
    ultimes: 0
    ultims: 0
    darreres: 0
    darrers: 0
    penultima: -1
    penultim: -1
    penúltima: -1
    penúltim: -1
    penultimes: -1
    penultims: -1
    penúltimes: -1
    penúltims: -1
    antepenultima: -2
    antepenultim: -2
    antepenúltima: -2
    antepenúltim: -2
    antepenultimes: -2
    antepenultims: -2
    antepenúltimes: -2
    antepenúltims: -2
    abans de l'últim: -1
    abans de la darrera: -1
    abans del darrer: -1
    anterior a la darrera: -1
    anterior a l'últim: -1
    anterior a l'última: -1
RelativeReferenceRelativeToMap: !dictionary
  types: [ string, string ]
  entries:
    propera: current
    proper: current
    properes: current
    propers: current
    anterior: current
    anteriors: current
    actual: current
    actuals: current
    següent: current
    següents: current
    ultima: end
    última: end
    últim: end
    ultimes: end
    ultims: end
    últimes: end
    darrers: end
    penultima: end
    penultim: end
    penúltima: end
    penúltim: end
    penultimes: end
    penultims: end
    penúltimes: end
    penúltims: end
    antepenultima: end
    antepenultim: end
    antepenúltima: end
    antepenúltim: end
    antepenultimes: end
    antepenultims: end
    antepenúltimes: end
    antepenúltims: end
    abans de l'últim: end
    abans de la darrera: end
    abans del darrer: end
    anterior a l'últim: end
    anterior a la darrera: end
...